type Query {
    users: [User]
    user(login: ID!): User
    categories: [Category]
    category(id: ID!): Category
    expenses: [Expense]
    expense(id: ID!): Expense
}

type Mutation {
    authenticate(login: ID!, password: String!): Boolean
    upsertUser(userInput: UserInput!): User
    upsertCategory(categoryInput: CategoryInput!): Category
    upsertExpense(expenseInput: ExpenseInput!): Expense
}

type User {
    login: ID
    password: String
    name: String
}

input UserInput {
    login: ID!
    password: String!
    name: String!
}

type Category {
    id: ID
    name: String
    createdBy: User
}

input CategoryInput {
    id: ID
    name: String!
    createdBy: ID!
}

type Expense {
    id: ID
    category: Category
    description: String
    amount: Float
    date: String
    createdBy: User
}

input ExpenseInput {
    id: ID
    categoryId: ID!
    description: String
    amount: Float!
    date: String
    createdBy: ID!
}
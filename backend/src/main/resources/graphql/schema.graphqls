type Query {
    """
    Get current user (requires user token)
    """
    user: User

    """
    Get categories of current user (requires user token)
    """
    categories: [Category]

    """
    Get expenses of current user (requires user token)
    """
    expenses: [Expense]
}

type Mutation {
    """
    Authenticate user by login and password.
    If authentication is successful, it generates user JWT-token
    """
    authenticate(login: ID!, password: String!): String

    """
    Create new user
    """
    createUser(userInput: UserInput!): User

    """
    Update current user (requires user token)
    """
    updateUser(userInput: UserInput!): User

    """
    Create new or update existing category of current user (requires user token)
    """
    upsertCategory(categoryInput: CategoryInput!): Category

    """
    Create new or update existing expense of current user (requires user token)
    """
    upsertExpense(expenseInput: ExpenseInput!): Expense
}

type User {
    login: ID
    password: String
    name: String
}

input UserInput {
    login: String
    password: String
    name: String
}

type Category {
    id: ID
    name: String
    createdBy: String
}

input CategoryInput {
    id: ID
    name: String
}

type Expense {
    id: ID
    categoryId: ID
    description: String
    amount: Float
    date: String
    createdBy: String
}

input ExpenseInput {
    id: ID
    categoryId: ID
    description: String
    amount: Float
    date: String
}